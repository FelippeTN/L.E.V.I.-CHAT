<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with Groq API</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
            background-color: #f7f7f8;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .chat-container {
            max-width: 600px;
            width: 100%;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            height: 80vh;
            overflow: hidden;
        }

        .messages {
            flex: 1;
            overflow-y: auto;
            margin-bottom: 20px;
            padding-right: 10px;
        }

        .message {
            margin-bottom: 10px;
            padding: 10px 15px;
            border-radius: 20px;
            max-width: 70%;
            word-wrap: break-word;
            line-height: 1.4;
            display: inline-block;
            clear: both;
        }

        .message.user {
            background-color: #007bff;
            color: white;
            text-align: right;
            float: right;
        }

        .message.bot {
            background-color: #f1f1f1;
            color: black;
            text-align: left;
            float: left;
        }

        .input-container {
            display: flex;
            flex-direction: row;
            align-items: center;
            border-top: 1px solid #ddd;
            padding-top: 10px;
        }

        textarea {
            flex: 1;
            padding: 10px;
            border-radius: 15px;
            border: 1px solid #ccc;
            padding-left: 15px;
            resize: none;
            overflow-y: hidden;
            min-height: 40px;
            box-sizing: border-box;
            width: 100%;
            max-height: 120px;
            margin-right: 10px;
        }

        button {
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 15px;
            cursor: pointer;
        }

        button:hover {
            background-color: #218838;
        }

        .file-icons {
            display: flex;
            align-items: center;
            margin-right: 10px;
        }

        .file-icon {
            font-size: 24px;
            cursor: pointer;
        }

        .file-name {
            font-size: 14px;
            color: #333;
        }

        input[type="file"] {
            display: none;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf.min.js"></script>
</head>

<body>
    <div class="chat-container">
        <div class="messages" id="messages"></div>
        <div class="input-container">
            <div class="file-icons">
                <i class="fa-solid fa-paperclip file-icon" onclick="document.getElementById('fileInput').click();"></i>
                <i class="fa-solid fa-trash file-icon" id="removeFileIcon" style="display: none;" onclick="removeFile();"></i>
                <span id="fileName" class="file-name"></span>
                <input type="file" id="fileInput" accept=".pdf" onchange="updateFileName()">
            </div>
            <textarea id="userInput" placeholder="Digite seu prompt aqui..."></textarea>

            <label>
                <input type="checkbox" id="webSearchCheckbox">
                Web Search
            </label>

            <button onclick="sendMessage()">Enviar</button>
        </div>
    </div>
    

    <script>

        const base_url = 'http://localhost:8001'; // llama-server

        const url = `${base_url}/llama_chat`;

        const textarea = document.getElementById('userInput');
        const fileInput = document.getElementById('fileInput');
        const fileNameSpan = document.getElementById('fileName');
        const removeFileIcon = document.getElementById('removeFileIcon');

        textarea.addEventListener('input', () => {
            const scrollHeight = textarea.scrollHeight;
            textarea.style.height = `${scrollHeight}px`;
        });

        document.getElementById('userInput').addEventListener('keydown', function (event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        });

        function updateFileName() {
            const file = fileInput.files[0];
            if (file) {
                fileNameSpan.textContent = file.name;
                removeFileIcon.style.display = 'inline';
            } else {
                fileNameSpan.textContent = '';
                removeFileIcon.style.display = 'none';
            }
        }

        function removeFile() {
            fileInput.value = '';
            fileNameSpan.textContent = '';
            removeFileIcon.style.display = 'none';
        }

        async function extractTextFromPDF(file) {
            const pdf = await pdfjsLib.getDocument(URL.createObjectURL(file)).promise;
            let text = '';

            for (let i = 0; i < pdf.numPages; i++) {
                const page = await pdf.getPage(i + 1);
                const content = await page.getTextContent();
                text += content.items.map(item => item.str).join(' ');
            }

            return text;
        }

        async function sendMessage() {
            const userInput = document.getElementById('userInput').value;
            const file = fileInput.files[0];
            const isWebSearchChecked = document.getElementById('webSearchCheckbox').checked;
            let pdfText = '';
            let pdfBase64 = null;
        
            if (file) {
                pdfText = await extractTextFromPDF(file);
                pdfBase64 = await fileToBase64(file);
            }
        
            if (!userInput && !pdfText) return;
        
            appendMessage(userInput || pdfText, 'user');
            document.getElementById('userInput').value = '';
            fileInput.value = ''; // Reset file input
            fileNameSpan.textContent = '';
            removeFileIcon.style.display = 'none';
            textarea.style.height = 'auto'; // Reset height after sending
            
            const requestBody = {
                prompt: userInput,
                pdf_base64: pdfBase64 || undefined,
                pdf_path: pdfText,
                web_search: isWebSearchChecked  // Passa o valor da checkbox
            };
        
            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',

                },
                body: JSON.stringify(requestBody),
            })
            .then(response => response.json())
            .then(data => {
                const botResponse = data.response.response;
                typeMessage(botResponse, 'bot');
            })
            .catch(error => {
                typeMessage('Error: ' + error, 'bot');
            });
        }

        function appendMessage(text, sender) {
            const messageContainer = document.createElement('div');
            messageContainer.classList.add('message', sender);
            messageContainer.innerText = text;
            document.getElementById('messages').appendChild(messageContainer);
            scrollToBottom();
        }

        function typeMessage(text, sender) {
            const messageContainer = document.createElement('div');
            messageContainer.classList.add('message', sender);
            document.getElementById('messages').appendChild(messageContainer);

            let i = 0;
            const typingSpeed = 25; // Typing speed in ms

            function type() {
                if (i < text.length) {
                    if (text.charAt(i) === '\n') {
                        messageContainer.innerHTML += '<br>'; // Line break for new lines in text
                    } else {
                        messageContainer.innerHTML += text.charAt(i);
                    }
                    i++;
                    scrollToBottom(); // Update scroll as text is typed
                    setTimeout(type, typingSpeed);
                }
            }
            type();
        }

        function scrollToBottom() {
            const messages = document.getElementById('messages');
            messages.scrollTop = messages.scrollHeight;
        }

        function fileToBase64(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => resolve(reader.result.split(',')[1]);
                reader.onerror = error => reject(error);
                reader.readAsDataURL(file);
            });
        }

    // Função para converter texto em fala
    function speak(text) {
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'pt-BR';
        window.speechSynthesis.speak(utterance);
    }

    function typeMessage(text, sender) {
        const messageContainer = document.createElement('div');
        messageContainer.classList.add('message', sender);
        document.getElementById('messages').appendChild(messageContainer);

        let i = 0;
        const typingSpeed = 25; // Velocidade de digitação em ms

        function type() {
            if (i < text.length) {
                if (text.charAt(i) === '\n') {
                    messageContainer.innerHTML += '<br>'; // Quebra de linha
                } else {
                    messageContainer.innerHTML += text.charAt(i);
                }
                i++;
                scrollToBottom(); // Atualizar rolagem conforme digita
                setTimeout(type, typingSpeed);
            } else if (sender === 'bot') {
                // Adicionar o ícone de som após a mensagem ser digitada
                const soundIcon = document.createElement('i');
                soundIcon.className = 'fa-solid fa-volume-high';
                soundIcon.style.cursor = 'pointer';
                soundIcon.style.marginLeft = '10px';
                soundIcon.title = 'Ouvir resposta';
                soundIcon.onclick = () => speak(text);
                messageContainer.appendChild(soundIcon);
            }
        }
        type();
    }
    </script>
</body>

</html>